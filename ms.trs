not true  = false .
not false = true .

lt X 0         = false .
lt 0 (s Y)     = true .
lt (s X) (s Y) = lt X Y .

eq 0 0         = true .
eq (s X) 0     = false .
eq 0 (s Y)     = false .
eq (s X) (s Y) = eq X Y .

and true true = true .
and false Y   = false .
and X false   = false .
and X Y       = and (not X) (not Y) .

append nil YS         = YS .
append (cons X XS) YS = cons X (append XS YS) .

nth (cons X XS) 0 = X .
nth (cons X XS) (s N) = nth XS N .

add 0 Y     = Y .
add (s X) Y = s (add X Y) .

if_filter P X XS true  = cons X (filter P XS) .
if_filter P X XS false = filter P XS .

filter P nil         = nil .
filter P (cons X XS) = if_filter P X XS (P X) .

map_prefixes X nil = nil .
map_prefixes X (cons Y YS) = append [cons X Y] (map_prefixes X YS) .

prefixes nil = [[]] .
prefixes (cons X XS) = cons nil (map_prefixes X (prefixes XS)) .

suffixes nil = [[]] .
suffixes (cons X XS) = cons (cons X XS) (suffixes XS) .

zip_interleave X nil nil = nil .
zip_interleave X (cons YS YSS) (cons ZS ZSS) = cons (append (append YS [X]) ZS) (zip_interleave X YSS ZSS) .

interleave X XS = zip_interleave X (prefixes XS) (suffixes XS) .

map_permutations X nil = nil .
map_permutations X (cons YS YSS) = append (interleave X YS) (map_permutations X YSS) .

permutations nil       = [[]] .
permutations (cons X XS) = map_permutations X (permutations XS) .

vl I nil = 0 .
vl 0 (cons X XS) = X .
vl (s I) (cons X XS) = vl I XS . 

ok XS = (and (and (and (and (and (and (and (eq (add (add (vl 0 XS) (vl 1 XS)) (vl 2 XS)) 15) (eq (add (add (vl 3 XS) (vl 4 XS)) (vl 5 XS)) 15)) (eq (add (add (vl 6 XS) (vl 7 XS)) (vl 8 XS)) 15)) (eq (add (add (vl 0 XS) (vl 3 XS)) (vl 6 XS)) 15)) (eq (add (add (vl 1 XS) (vl 4 XS)) (vl 7 XS)) 15))(eq (add (add (vl 2 XS) (vl 5 XS)) (vl 8 XS)) 15)) (eq (add (add (vl 0 XS) (vl 4 XS)) (vl 8 XS)) 15)) (eq (add (add (vl 2 XS) (vl 4 XS)) (vl 6 XS)) 15)) .

if_ms (cons X XS) true = cons X (if_ms XS (ok XS)) .
if_ms (cons X XS) false = if_ms XS (ok XS) .
 
ms nil = nil .
ms (cons X XS) = if_ms XS (ok XS) .

main = ms (permutations [1,2,3,4,5,6,7,8,9]) .

